#
# Note: this file is interpreted by the rest client:
#       https://marketplace.visualstudio.com/items?itemName=humao.rest-client
# 

# set variables TESTPWD or ROOTPWD in a file .env

# set these default in:
# open the settings editor: [ctrl]+","
#   => look for "REST Client"
#     => "Rest-client: Environment Variables"
#       => edit in settings.json
# add: 
# "rest-client.environmentVariables": {
#     "$shared": {
#         "version": "v2"
#     },
#     "local": {
#       "api_protocol": "http",
#       "api_host": "localhost",
#       "api_port": ":3333",
#       "sipi_protocol": "http",
#       "sipi_host": "localhost",
#       "sipi_port": ":1024",
#       "iuser": "localUser",
#       "ipwd": "localPwd"
#     },
#       "production": {
#       "api_protocol": "https",
#       "api_host": "api.ls-prod-server.dasch.swiss",
#       "api_port": "",
#       "sipi_protocol": "https",
#       "sipi_host": "iiif.ls-prod-server.dasch.swiss",
#       "sipi_port": "",
#       "iuser": "prodUser"
#       "ipwd": "prodPwd"
#     }
# }
#
# local `.env` file should also define these `localUser`, `localPwd`, `prodUser`, ...
# 
# switch environments on the bottom right of the VS Code window

@apiUrl = {{api_protocol}}://{{api_host}}{{api_port}}
@user = {{$dotenv %importUser}}  
@pwd = {{$dotenv %importPwd}}


#
# login to dsp-api
# the returned token is needed to upload a file to sipi
#

###

# @name login
POST {{apiUrl}}/v2/authentication HTTP/1.1
Content-Type: application/json

{
    "email": "{{user}}",
    "password": "{{pwd}}"
}

###
@token = {{login.response.body.token}}

###

#
# upload the style sheet to turn TEI-XML into HTML
# that produces a temporary file on sipi that will be turned into a file value of a dsp-api resource 
# we need to read the internal file name to pass it to the dsp-api when creating this resource
#

# @name upload
POST {{sipi_protocol}}://{{sipi_host}}{{sipi_port}}/upload?token={{token}} HTTP/1.1
Content-Type: multipart/form-data; boundary=MyBoundary

--MyBoundary
Content-Disposition: form-data; name="file"; filename="tei2html.xsl"
Content-Type: application/octet-stream

< ./tei2html.xsl

--MyBoundary--

###
@internalFilename = {{upload.response.body.uploadedFiles[0].internalFilename}}

###

#
# Note: from now on we decide that the knora-api:XSLTransformation
#       instance has the IRI: http://rdfh.ch/0112/T0x_LOB5SIySW8PgDPVzSQ
#       (I didn't manage to make it a human readable value, it has to be a base64 v4 or 5 UUID)
# 

#
# select record to delete (if it was created before)
#

POST http://localhost:3030/knora-test/sparql HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Authorization: Basic {{$dotenv localFusekiUser}}:{{$dotenv localFusekiPwd}}

query=
prefix knora-admin: <http://www.knora.org/ontology/knora-admin#>
construct {
  ?subject ?predicate ?object
}
WHERE {
  bind(<http://rdfh.ch/0112/T0x_LOB5SIySW8PgDPVzSQ> as ?subject)
  ?subject ?predicate ?object
}

###

#
# delete failed attempt (if it was created before)
#
# Note: I didn't manage to delete a resource => delete the whole data graph
#       and re-import (or all graphs)
#

POST http://localhost:3030/knora-test/update HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Authorization: Basic {{$dotenv localFusekiUser}}:{{$dotenv localFusekiPwd}}

update=
prefix knora-admin: <http://www.knora.org/ontology/knora-admin#>
delete {
  ?subject ?predicate ?object
}
WHERE {
  bind(<http://rdfh.ch/0112/T0x_LOB5SIySW8PgDPVzSQ> as ?subject)
  ?subject ?predicate ?object
}

###

#
# create knora-api:XSLTransformation (a FileValue resource) with the XSLT file as value
# so we can adress it in api calls
#

# @name transformation
POST {{apiUrl}}/v2/resources HTTP/1.1
Content-Type: application/ld+json
Authorization: Basic {{user}}:{{pwd}}

{
  "@type" : "knora-api:XSLTransformation",
  "@id" : "http://rdfh.ch/0112/T0x_LOB5SIySW8PgDPVzSQ",
  "knora-api:hasTextFileValue" : {
    "@type" : "knora-api:TextFileValue",
    "knora-api:fileValueHasFilename" : "{{internalFilename}}"
  },
  "knora-api:attachedToProject" : {
    "@id" : "http://rdfh.ch/projects/0112"
  },
  "rdfs:label" : "XSLT for Roud project",
  "@context" : {
    "rdf" : "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "knora-api" : "http://api.knora.org/ontology/knora-api/v2#",
    "rdfs" : "http://www.w3.org/2000/01/rdf-schema#",
    "xsd" : "http://www.w3.org/2001/XMLSchema#"
  }
}

# local run: id of the created resource: knora-api:XSLTransformation 
#   "@id": "http://rdfh.ch/0112/nMAGGeR_TfW5KoWeISNTvw",
# replace it in the xml file we upload next

###

# create the actual mapping
# mapping between the xml tags and standoff classes
# xml tags that will come in uploaded transcriptions 

POST {{apiUrl}}/v2/mapping HTTP/1.1
Authorization: Basic {{user}}:{{pwd}}
Content-Type: multipart/form-data; boundary=MyBoundary

--MyBoundary
Content-Disposition: form-data; name="json"
Content-Type: application/json

{
  "knora-api:mappingHasName" : "roudMapping",
  "knora-api:attachedToProject" : {
    "@id" : "http://rdfh.ch/projects/0112"
  },
  "rdfs:label" : "Mapping for Roud project",
  "@context" : {
    "rdf" : "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs" : "http://www.w3.org/2000/01/rdf-schema#",
    "knora-api" : "http://api.knora.org/ontology/knora-api/v2#"
  }
}

--MyBoundary
Content-Disposition: form-data; name="xml"
Content-Type: text/xml; charset=utf-8

< ./roudMapping.xml

--MyBoundary--

###



# test: send a transcription using the new mapping

# @name createdText
POST {{apiUrl}}/v2/resources HTTP/1.1
Content-Type: application/ld+json
Authorization: Basic {{user}}:{{pwd}}

{   
  "@type" : "roud-oeuvres:EstablishedText",
  "@id" : "http://rdfh.ch/0112/OxRjdZl8TGWhM-L77hsDfw",
  "roud-oeuvres:hasTextContent" : {
    "@type" : "knora-api:TextValue",
    "knora-api:hasPermissions" : "CR knora-admin:ProjectAdmin|D knora-admin:ProjectMember|V knora-admin:UnknownUser",
    "knora-api:textValueAsXml" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?><text> <body> <head type=\"main\">Vers libres (très)</head> <div n=\"Écrit un jour\"> <head rend=\"p\">Écrit un jour de pluie.</head> <lg> <l>Il pleut, il pleut, il pleut.</l> <l>Il pleut à torrents</l> <l>Rien n'est bleu,</l> <l>Les nuages, poussés par le vent</l> <l>Courent sur l'azur qu'ils cachent</l> <l>Les arbres gémissent et se tordent,</l> <l>Le vent leur arrache</l> <l>Un pétale qui borde</l> <l>Une corolle blanche.</l> <l>Les maisons sont (tristes et) grises</l> <l>Et sur l'aile que penche</l> <l>Un oiseau rapide</l> <l>Un rayon irise</l> <l>Une goutte tombée</l> <l>D'un nuage livide.</l> <l>Dans la forêt sombre</l> <l>Sous la feuillée</l> <l>Dans l'ombre</l> <l>Une plante mouillée</l> <l>Baisse la tête</l> <l>Tandis qu'autour d'elle</l> <l>Poussent les herbettes</l> <l>Une feuille arrête</l> <l>Un brin de soleil</l> </lg> </div> <div n=\"Test\"> <p>This is a test for an <hi rend=\"italic\">italic hi</hi>.</p> <p><hi rend=\"align-left\">This is a test for a left hi</hi></p><p><hi rend=\"align-right\">This is a test for a right hi</hi></p> <p><hi rend=\"align-center\">This is a test for a center hi</hi></p></div> <div n=\"This is\">This is a test of an <unclear>unclear</unclear> reading and a <gap reason=\"illegible\"/>.</div> <div n=\"quote\"><p>Some <quote rend=\"inline\">text<note>Citation libre de <hi rend=\"italic\">Hamlet</hi> de Shakespeare, acte IV, scène 5 : « Lord, we know what we are, but know not what we may be » (« Seigneur, nous savons ce que nous sommes, mais nous ne savons pas ce que nous serons » ; Shakespeare, Œuvres complètes, t. 1, dir. Jean-Michel Déprats, Paris, Gallimard, « Bibliothèque de la Pléiade », 2002, p. 896).</note></quote> here.</p></div><div n=\"J'ai souvent cru\"><p>J'ai souvent cru, en lisant le sonnet de Mallarmé <quote rend=\"block\">« Le printemps maladif a chassé tristement<lb/>L'hiver, saison de l'art serein, de l'art lucide »<note type=\"quote\">Citation libre des deux premiers vers de « Renouveau », de Mallarmé : « Le printemps maladif a chassé tristement / L'hiver, saison de l'art serein, l'hiver lucide. » (Poésies, <hi rend=\"italic\">Œuvres complètes</hi>, t. 1, dir. Bertrand Marchal, Paris, Gallimard, « Bibliothèque de la Pléiade », 1998, p. 11.) En parlant de « redite baudelairienne », Roud fait référence à l'une des caractéristiques du spleen de Baudelaire, tel qu'il s'exprime notamment dans les poèmes « Brumes et pluies » ou « Paysage », à savoir l'éloge de la saison hivernale perçue comme favorable à l'âme de l'artiste.</note></quote> à quelque redite baudelairienne ; aujourd'hui seulement je ressens ces vers dans leur plénitude et leur vérité. Oui, dès le printemps vous sortez de vos murs, il n'est pas une pensée, son ombre même, qui ne trouve aussitôt hors de vous un prolongement physique. Vous ne pouvez cerner votre esprit ; mille issues le laissent fuir dans un monde de résonances dévorantes.</p></div> </body> </text>",
    "knora-api:textValueHasMapping" : {
      "@id" : "http://rdfh.ch/projects/0112/mappings/roudMapping"
    }
  },
  "roud-oeuvres:establishedTextHasTitle" : {
    "@type" : "knora-api:TextValue",
    "knora-api:textValueAsXml" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?><text><p>Avers libres</p></text>",
    "knora-api:textValueHasMapping" : {
      "@id" : "http://rdfh.ch/standoff/mappings/StandardMapping"
    }
  },
  "knora-api:attachedToProject" : {
    "@id" : "http://rdfh.ch/projects/0112"
  },
  "rdfs:label" : "texte_AVers libres_1909",
  
  "@context" : {
    "rdf" : "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "knora-api" : "http://api.knora.org/ontology/knora-api/v2#",
    "rdfs" : "http://www.w3.org/2000/01/rdf-schema#",
    "xsd" : "http://www.w3.org/2001/XMLSchema#",
    "roud-oeuvres" : "http://0.0.0.0:3333/ontology/0112/roud-oeuvres/v2#"
  }
}

###

#
# trying to read the "@id" to later request it... => failed
# if you can't read "@id", fix it in the creation
#

# these two work
@createdTextArk = {{createdText.response.body.$['knora-api:arkUrl']['@value']}}
@createdTextArkAlt = {{createdText.response.body.knora-api:arkUrl.@value}}
# not this one... I don't manage to grab "@id"
@createdTextId = {{createdText.response.body.'@id'}}
@createdTextId = {{createdText.response.body.'\x40id'}}
@createdTextId = {{createdText.response.body.['@id']}}
@createdTextId = {{createdText.response.body.['\x40id']}}
@createdTextId = {{createdText.response.body.$['@id']}}

###

#GET {{apiUrl}}/v2/resources/{{createdTextId}} HTTP/1.1
# how do you encode the iri automatically?
GET {{apiUrl}}/v2/resources/http%3A%2F%2Frdfh.ch%2F0112%2FOxRjdZl8TGWhM-L77hsDfw HTTP/1.1
Content-Type: application/ld+json
Authorization: Basic {{user}}:{{pwd}}

# in the response, read the `knora-api:textValueAsHtml` which is using the XSLT to render HTML
